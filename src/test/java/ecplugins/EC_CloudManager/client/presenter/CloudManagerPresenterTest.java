
// CloudManagerPresenterJTest.java --
//
// CloudManagerPresenterJTest.java is part of ElectricCommander.
//
// Copyright (c) 2005-2012 Electric Cloud, Inc.
// All rights reserved.
//

package ecplugins.EC_CloudManager.client.presenter;

import org.junit.Before;
import org.junit.Test;

import org.mockito.Mock;

import com.google.gwt.event.shared.EventBus;
import com.google.gwt.user.client.ui.HasText;
import com.google.gwt.user.client.ui.Widget;

import com.gwtplatform.mvp.client.Presenter;
import com.gwtplatform.mvp.client.View;
import com.gwtplatform.mvp.client.proxy.PlaceManager;
import com.gwtplatform.mvp.client.proxy.Proxy;
import com.gwtplatform.mvp.client.proxy.ProxyPlace;

import ecinternal.client.ComponentController;

import ecinternal.client.events.ChangeTitleEvent;

import ecinternal.client.presenter.ObjectIteratorPresenter;

import ecplugins.EC_CloudManager.client.jtest.CMTestBase;

import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import static ecplugins.EC_CloudManager.client.presenter.CloudManagerPresenter.TYPE_SetIterator;
import static ecplugins.EC_CloudManager.client.presenter.CloudManagerPresenter.TYPE_SetMainContent;

@SuppressWarnings({"HardCodedStringLiteral"})
public class CloudManagerPresenterTest
    extends CMTestBase
{

    //~ Instance fields --------------------------------------------------------

    private MockPresenter m_presenter;
    private Widget        m_subWidget;

    // Generated by Mockito
    @Mock private View                          m_subView;
    @Mock private CloudManagerPresenter.MyView  m_view;
    @Mock private CloudManagerPresenter.MyProxy m_proxy;
    @Mock private ProxyPlace<MockPresenter>     m_place;
    @Mock private ObjectIteratorPresenter       m_iteratorPresenter;
    @Mock private PlaceManager                  m_placeManager;
    @Mock private ComponentController           m_controller;
    @Mock private HasText                       m_title;
    @Mock private HasText                       m_subtitle;

    //
    private CloudManagerPresenter m_cloudManagerPresenter;

    //~ Methods ----------------------------------------------------------------

    @Test public void testOnChangeTitle_withoutSubtitle()
    {
        when(m_view.getTitle()).thenReturn(m_title);
        when(m_view.getSubtitle()).thenReturn(m_subtitle);
        m_cloudManagerPresenter.onChangeTitle(new ChangeTitleEvent("title",
                null));

        //
        verify(m_title).setText("title");
        verify(m_subtitle).setText("");
        verify(m_view).setSubtitleVisible(false);
        verify(m_view).setWindowTitle("title");
        verify(m_view).updateShortcut("title");
    }

    @Test public void testOnChangeTitle_withSubtitle()
    {
        when(m_view.getTitle()).thenReturn(m_title);
        when(m_view.getSubtitle()).thenReturn(m_subtitle);
        m_cloudManagerPresenter.onChangeTitle(new ChangeTitleEvent("title",
                "subtitle"));

        //
        verify(m_title).setText("title");
        verify(m_subtitle).setText("subtitle");
        verify(m_view).setSubtitleVisible(true);
        verify(m_view).setWindowTitle("title - subtitle");
        verify(m_view).updateShortcut("title - subtitle");
    }

    @Test public void testSetInSlot_noHash()
        throws Exception
    {
        when(m_place.getNameToken()).thenReturn("list");
        when(m_controller.getHelpLink()).thenReturn(
            "http://commander/pages/foo/help");
        m_cloudManagerPresenter.setInSlot(TYPE_SetMainContent, m_presenter);
        verify(m_controller).setHelpLink(
            "http://commander/pages/foo/help#list");
    }

    @Test public void testSetInSlot_otherContent()
    {
        m_cloudManagerPresenter.setInSlot(TYPE_SetIterator, m_presenter);
        verify(m_view).setInSlot(TYPE_SetIterator, m_subWidget);
        verify(m_controller, never()).getHelpLink();
    }

    @Test public void testSetInSlot_replaceHash()
        throws Exception
    {
        when(m_place.getNameToken()).thenReturn("edit");
        when(m_controller.getHelpLink()).thenReturn(
            "http://commander/pages/foo/help#other");
        m_cloudManagerPresenter.setInSlot(TYPE_SetMainContent, m_presenter);
        verify(m_controller).setHelpLink(
            "http://commander/pages/foo/help#edit");
    }

    @Before @Override public void setUp()
    {
        super.setUp();
        m_cloudManagerPresenter = new CloudManagerPresenter(m_eventBus, m_view,
                m_proxy, m_iteratorPresenter, m_placeManager, m_controller);
        m_presenter             = new CloudManagerPresenterTest.MockPresenter(
                m_eventBus, m_subView, m_place);
        m_subWidget             = mock(Widget.class);
    }

    //~ Inner Classes ----------------------------------------------------------

    private class MockPresenter
        extends Presenter<View, Proxy<MockPresenter>>
    {

        //~ Constructors -------------------------------------------------------

        MockPresenter(
                EventBus             eventBus,
                View                 view,
                Proxy<MockPresenter> proxy)
        {
            super(eventBus, view, proxy);
        }

        //~ Methods ------------------------------------------------------------

        @Override protected void revealInParent() { }

        @Override
        @SuppressWarnings({"RefusedBequest"})
        public Widget getWidget()
        {
            return m_subWidget;
        }
    }
}
